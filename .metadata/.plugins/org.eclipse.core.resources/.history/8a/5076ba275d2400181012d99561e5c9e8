package com.writing.mangement.WPM.install.traverse;

import java.io.IOException;
import java.nio.file.FileVisitResult;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.SimpleFileVisitor;
import java.nio.file.attribute.BasicFileAttributes;
import java.util.HashSet;
import java.util.Set;

import com.writing.management.WPM.registry.WritingPieceRegistry;
import com.writing.management.WPM.registry.WPMDocuments.Status;
import com.writing.management.WPM.registry.WPMDocuments.WritingPiece;
import com.writing.management.WPM.registry.WPMDocuments.factory.WritingPieceFactory;
import com.writing.management.tool.WPMTools.DirectoryLocations;

public class ScanForSubmissionDirectory implements ScanDirectory{
	
	public static void traverseFictionDir() {
		Path p = Paths.get(DirectoryLocations.getFictionDocumentsForSubmissionFolder());
		addToReg(traverse(p));
	}
	
	public static void traversePoetryDir() {
		Path p = Paths.get(DirectoryLocations.getPoetryDocumentsForSubmissionFolder());
		addToReg(traverse(p));
	}
	private static void addToReg(Set<Path> paths) {
		for(Path path : paths) {
			WritingPiece wp = WritingPieceFactory.create(path, Status.READY_FOR_SUBMISSION);
			if(wp != null) {
				WritingPieceRegistry.insert(wp);
			}
		}
	}
	public static Set<Path> traverse(Path path) {
		final Set<Path> discoveredPaths = new HashSet<Path>();
		SimpleFileVisitor<Path> fv = new SimpleFileVisitor<Path>() {
			 @Override
		      public FileVisitResult visitFile(Path file, BasicFileAttributes attrs)
		          throws IOException {	
				 discoveredPaths.add(file);				
				 return FileVisitResult.CONTINUE;
		      }
		    };
		    try {
		    	Files.walkFileTree(path, fv);
		    }catch(IOException e) {
		    	e.printStackTrace();
		    }
			return discoveredPaths;
	}
}
