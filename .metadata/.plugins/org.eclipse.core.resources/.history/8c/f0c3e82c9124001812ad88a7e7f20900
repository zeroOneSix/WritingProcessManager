package com.writing.Test;

import java.io.IOException;
import java.nio.file.FileSystems;
import java.nio.file.FileVisitResult;
import java.nio.file.Files;
import java.nio.file.LinkOption;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.SimpleFileVisitor;
import java.nio.file.StandardWatchEventKinds;
import java.nio.file.WatchEvent;
import java.nio.file.WatchKey;
import java.nio.file.WatchService;
import java.nio.file.attribute.BasicFileAttributes;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import com.writing.documents.Status;
import com.writing.documents.WritingPiece;
import com.writing.documents.WritingType;

public class WatchDirs implements Runnable {
	 private final WatchService watcher;
	    private final Map<WatchKey,Path> keys;
	    private final boolean recursive;
	    private boolean trace = false;
	    private static Set<WritingPiece> unprocessedWritingPieces= new HashSet<WritingPiece>();

	    @SuppressWarnings("unchecked")
	    static <T> WatchEvent<T> cast(WatchEvent<?> event) {
	        return (WatchEvent<T>)event;
	    }

	    /**
	     * Creates a WatchService and registers the given directory
	     */
	    public WatchDirs(Path dir, boolean recursive) throws IOException {
	        this.watcher = FileSystems.getDefault().newWatchService();
	        this.keys = new HashMap<WatchKey,Path>();
	        this.recursive = recursive;

	        if (recursive) {
	            System.out.format("Scanning %s ...\n", dir);
	            registerAll(dir);
	            System.out.println("Done.");
	        } else {
	            register(dir);
	        }

	        // enable trace after initial registration
	        this.trace = true;
	    }
	    /**
	     * Register the given directory with the WatchService
	     */
	    private void register(Path dir) throws IOException {
	        WatchKey key = dir.register(watcher, StandardWatchEventKinds.ENTRY_CREATE, StandardWatchEventKinds.ENTRY_DELETE, StandardWatchEventKinds.ENTRY_MODIFY);
	        if (trace) {
	            Path prev = keys.get(key);
	            if (prev == null) {
	                System.out.format("register: %s\n", dir);
	            } else {
	                if (!dir.equals(prev)) {
	                    System.out.format("update: %s -> %s\n", prev, dir);
	                }
	            }
	        }
	        keys.put(key, dir);
	    }

	    /**
	     * Register the given directory, and all its sub-directories, with the
	     * WatchService.
	     */
	    private void registerAll(final Path start) throws IOException {
	        // register directory and sub-directories
	        Files.walkFileTree(start, new SimpleFileVisitor<Path>() {
	            @Override
	            public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs)
	                throws IOException
	            {
	                register(dir);
	                return FileVisitResult.CONTINUE;
	            }
	        });
	    }

	    /**
	     * Process all events for keys queued to the watcher
	     */
	    public void processEvents() {
	        for (;;) {

	            // wait for key to be signalled
	            WatchKey key;
	            try {
	                key = watcher.take();
	                Thread.sleep(50);
	            } catch (InterruptedException x) {
	                return;
	            }

	            Path dir = keys.get(key);
	            if (dir == null) {
	                System.err.println("WatchKey not recognized!!");
	                continue;
	            }

	            for (WatchEvent<?> event: key.pollEvents()) {
	                WatchEvent.Kind kind = event.kind();

	                // TBD - provide example of how OVERFLOW event is handled
	                if (kind == StandardWatchEventKinds.OVERFLOW) {
	                    continue;
	                }
	                

	                // Context for directory entry event is the file name of entry
	                WatchEvent<Path> ev = cast(event);
	                Path name = ev.context();
	                Path child = dir.resolve(name);
	                if(kind == StandardWatchEventKinds.ENTRY_CREATE) {
	                	if(name.toString().endsWith(".docx")) {
	                		WritingPiece writingPiece;
	                		if(child.toString().contains("\\Poetry\\")) {
	                			writingPiece = new WritingPiece(name.toString(), Status.DOCUMENT_FOR_REVIEW, WritingType.POEM, child);
	                			if(!unprocessedWritingPieces.contains(writingPiece)) {
	                				unprocessedWritingPieces.add(writingPiece);
	                			}
	                		}else if (child.toString().contains("\\Fiction\\")) {
	                			writingPiece = new WritingPiece(name.toString(), Status.DOCUMENT_FOR_REVIEW, WritingType.FICTION, child);
	                			if(!unprocessedWritingPieces.contains(writingPiece)) {
	                				unprocessedWritingPieces.add(writingPiece);
	                			}
	                		}
	                			
//	                		WritingPiece writingPiece = new WritingPiece(name.toString(), Status.DOCUMENT_FOR_REVIEW, null, child);
	                		System.out.println(name);
	                	}
	                	// print out event
		                System.out.format("%s: %s\n", event.kind().name(), child);
	                }
	               
	                
	                // if directory is created, and watching recursively, then
	                // register it and its sub-directories
	                if (recursive && (kind == StandardWatchEventKinds.ENTRY_CREATE)) {
	                    try {
	                        if (Files.isDirectory(child, LinkOption.NOFOLLOW_LINKS)) {
	                            registerAll(child);
	                        }
	                    } catch (IOException x) {
	                        // ignore to keep sample readbale
	                    }
	                }
	            }

	            // reset key and remove from set if directory no longer accessible
	            boolean valid = key.reset();
	            if (!valid) {
	                keys.remove(key);

	                // all directories are inaccessible
	                if (keys.isEmpty()) {
	                    break;
	                }
	            }
	            try {
					Thread.sleep(4000);
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
	        }
	    }
	    
	    public static Set<WritingPiece> getUnprocessedWritingPieces(){
	    	return unprocessedWritingPieces;
	    }
	    
	    static void usage() {
	        System.err.println("usage: java WatchDir [-r] dir");
	        System.exit(-1);
	    }

		public void run() {
			processEvents();
			
		}
}
